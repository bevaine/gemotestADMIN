<?php

namespace common\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\log\Logger;

/**
 * This is the model class for table "gms_playlist".
 *
 * @property integer $id
 * @property string $name
 * @property string $file
 * @property integer $type
 * @property integer $region
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $group_id
 * @property integer $device_id
 * @property string $sender_id
 * @property string $jsonPlaylist
 * @property GmsRegions $regionModel
 * @property GmsSenders $senderModel
 * @property GmsDevices $deviceModel
 * @property GmsGroupDevices $groupDevicesModel
 */

class GmsPlaylist extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'gms_playlist';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['jsonPlaylist', 'type'], 'required'],
            [['type', 'region', 'created_at', 'updated_at', 'sender_id', 'group_id', 'device_id'], 'integer'],
            [['name', 'file'], 'string', 'max' => 255],
            [['jsonPlaylist'], 'string'],
        ];
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord)
            $this->created_at = time();
        else
            $this->updated_at = time();

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'file' => 'Имя файла',
            'type' => 'Тип шаблона',
            'region' => 'Регион проигр.',
            'created_at' => 'Создан',
            'updated_at' => 'Обновлен',
            'jsonPlaylist' => 'Плейлист',
            'sender_id' => 'Код отделения',
            'sender_name' => 'Отделение',
            'group_id' => 'Группа устр.',
            'device_name' => 'Устройство'
        ];
    }

    /**
     * @param null $id
     * @return array|mixed
     */
    public static function getPlayListType($id = null) {
        $arr =  ['1' => 'Стандартный', '2' => 'Коммерческий'];
        return is_null($id) ? $arr : $arr[$id];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRegionModel()
    {
        return $this->hasOne(GmsRegions::className(), ['id' => 'region']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSenderModel()
    {
        return $this->hasOne(GmsSenders::className(), ['id' => 'sender_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroupDevicesModel()
    {
        return $this->hasOne(GmsGroupDevices::className(), ['group_id' => 'group_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDeviceModel()
    {
        return $this->hasOne(GmsDevices::className(), ['id' => 'device_id']);
    }

    /**
     * @param $video_key
     * @return bool
     */
    public function getVideoData($video_key)
    {
        /** @var GmsPlaylistOut $findModel */
        if (!empty($this->jsonPlaylist)) {
            $jsonPlaylist = json_decode($this->jsonPlaylist);
            if (empty($jsonPlaylist->children)) return false;
            $arrTitle = ArrayHelper::getColumn($jsonPlaylist->children, 'title');
            $arrTypes = ArrayHelper::getColumn($jsonPlaylist->children, 'data');
            $arrKeys = ArrayHelper::getColumn($jsonPlaylist->children, 'key');
            $arr_comb1 = array_combine($arrKeys , $arrTitle);
            $arr_comb2 = array_combine($arrKeys , $arrTypes);

            if (array_key_exists($video_key, $arr_comb1) &&
                array_key_exists($video_key, $arr_comb2)
            ) {
                $d = $arr_comb2[$video_key];
                $d->title = $arr_comb1[$video_key];
                return $d;
            }
        }
        return false;
    }

    /**
     * @param $video_key
     * @return bool
     */
    static function removeVideoData($video_key)
    {
        if ($findModel = self::find()->all()) {
            /** @var GmsPlaylist $model */
            foreach ($findModel as $model) {
                $jsonPlaylist = ArrayHelper::toArray(json_decode($model->jsonPlaylist));
                $arrChildren = $jsonPlaylist["children"];
                $arrKeys = ArrayHelper::getColumn($arrChildren, 'key');
                $arr_keys = array_keys($arrKeys, $video_key);
                if (empty($arr_keys)) continue;
                foreach ($arr_keys as $key) {
                    unset($arrChildren[$key]);
                }
                $arrChildren = array_values($arrChildren);
                $jsonPlaylist["children"] = $arrChildren;
                $model->jsonPlaylist = json_encode($jsonPlaylist, JSON_UNESCAPED_UNICODE);
                if (!$model->save()) {
                    Yii::getLogger()->log([
                        'removeVideoData->$model->save()'=>$model->errors
                    ], Logger::LEVEL_ERROR, 'binary');
                }
            }
            return true;
        } else return false;
    }
}
